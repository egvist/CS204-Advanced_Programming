#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>
#include <sstream>

using namespace std;

struct node
{
	char ch;
	node * next;
};void PrinttheList(node *head){	node *ptr;	ptr = head;	while(ptr != NULL)	{		cout << ptr->ch;		ptr = ptr->next;	}}/* Begin: code taken from Week3 Slides recursive DeleteList func */void DeleteList(node *head){	if(head != nullptr)	{		DeleteList(head->next);		delete head;	}}/* End: code taken from Week3 Slides recursive DeleteList func *//* Begin: code taken from Week3 Slides Deleting a single node func */void DeleteEl(node * &head, node *toBeDeleted){	node *ptr;	if (toBeDeleted->ch == head->ch)	{		head = head->next;		delete toBeDeleted;	}	else	{		ptr = head;		while(ptr->next->ch != toBeDeleted->ch)		{			ptr = ptr->next;		}		ptr->next = ptr->next->next;		delete toBeDeleted;	}}/* End: code taken from Week3 Slides Deleting a single node func */void InsertInList(node * &head, char ins , char aft){	node *ptr = head;	node *ptr2 = head;	int count = 0;	node *temp = new node;	temp->ch = ins;	temp->next = nullptr;	while (ptr2 != nullptr)	{		if (ptr2->ch == aft)		{			count += 1;		}		ptr2 = ptr2->next;	}	if (count == 0)	{		cout << "The node with " << aft << " value does not exist. Therefore, Inserting " << ins << " at the beginning of the list." << endl;		node *temp2 = new node;		temp2->ch = ins;		temp2->next = head;		head = temp2;						}	else	{		while(ptr->ch != aft)		{			ptr = ptr->next;		}			temp->next = ptr->next;		ptr->next = temp;		cout << "The node with " << ins << " has been inserted after the first occurence of a node with " << aft << " value." << endl;				}	}node * AddtoList(node *head, char c){	node *ptr = head;	if (head == nullptr)	{		node *temp = new node;		temp->ch = c;		temp->next = head;		return temp;	}	while (ptr->next != nullptr)	{		ptr = ptr->next;	}	node *temp = new node;	temp->ch = c;	temp->next = ptr->next;	ptr->next = temp;	return head;}bool checkContains(node *head, char c){	node *ptr = head;	bool val = false;	while(ptr != nullptr)	{		if (ptr->ch == c)		{			val = true;		}		ptr = ptr->next;	}	return val;	}int similarity(node *head1, node *head2){	int count = 0;		node *ptr1;	node *ptr2;	ptr1 = head1;	ptr2 = head2;	while (ptr1 != nullptr && ptr2 != nullptr)	{		if (ptr1->ch == ptr2->ch)		{			count += 1;		}		ptr1 = ptr1->next;		ptr2 = ptr2->next;	}	return count;}int main(){	string input_file1;	string input_file2;	cout << "Please enter the file 1 name: ";	cin >> input_file1;	node *head1 = nullptr;	node *head2 = nullptr;	ifstream file1;	ifstream file2;	file1.open(input_file1);	while(!file1)	{				cout << "Please enter the file 1 name: ";		cin >> input_file1;		file1.open(input_file1);	}	if (file1.is_open())	{		char c1;				while (file1 >> c1)		{						head1 = AddtoList(head1,c1);		}			}	file2.open(input_file2);	while(!file2)	{		cout << "Please enter the file 2 name: ";		cin >> input_file2;		file2.open(input_file2);	}	if (file2.is_open())	{		char c2;					while (file2 >> c2)		{						head2 = AddtoList(head2,c2);		}	}	cout << "List1: ";	PrinttheList(head1);	cout << endl;	cout << "List2: ";	PrinttheList(head2);	cout << endl;	int count = 0;		vector<string> commands;	commands.push_back("sim");	commands.push_back("del1");	commands.push_back("del2");	commands.push_back("insert1");	commands.push_back("insert2");	commands.push_back("exit");	do	{						string command;				cout << "Enter a command and its corresponding argument(s), if any: ";		string cmdstr;		if (count == 0)		{			cin.ignore();		}		count += 1;		char poschar1;		char poschar2;				getline(cin, command);		istringstream cmdstream(command);		cmdstream >> cmdstr;		if (find(commands.begin(), commands.end(), cmdstr) != commands.end())		{			if(cmdstr == "sim")			{				cout << "Displaying the contents of the two lists:" << endl;				cout << "List1: ";				PrinttheList(head1);				cout << endl;				cout << "List2: ";				PrinttheList(head2);				cout << endl;				cout << "There is/are " << similarity(head1,head2) << " letter(s) matched in the same positions in both lists." << endl; 				cout << endl;			}						else if(cmdstr == "del1")			{				cmdstream >> poschar1;				if (islower(poschar1) == false)				{					cout << "Invalid arguments." << endl;				}				else if (checkContains(head1,poschar1) == false)				{					cout << "No deletion as the value " << poschar1 << " was not found in the list" << endl; 				}				else				{					while(checkContains(head1,poschar1) == true)					{						node *temp = new node;						temp->ch = poschar1;						temp->next = nullptr;						DeleteEl(head1,temp);										}					cout << "Deleting all occurences of " << poschar1 << " in the List1." << endl;					cout << "The current content of List1 is: ";					PrinttheList(head1);					cout << endl << endl;									}							}			else if(cmdstr == "del2")			{				cmdstream >> poschar2;				if (islower(poschar2) == false)				{					cout << "Invalid arguments." << endl;				}				else if (checkContains(head2,poschar2) == false)				{					cout << "No deletion as the value " << poschar2 << " was not found in the list" << endl; 				}				else				{					while(checkContains(head2,poschar2) == true)					{						node *temp = new node;						temp->ch = poschar2;						temp->next = nullptr;						DeleteEl(head2,temp);										}					cout << "Deleting all occurences of " << poschar2 << " in the List2." << endl;					cout << "The current content of List2 is: ";					PrinttheList(head2);					cout << endl << endl;									}			}						else if(cmdstr == "insert1")			{				cmdstream >> poschar1 >> poschar2;				cout << "Inserting " << poschar1 << " after " << poschar2 << " in List1." << endl;				InsertInList(head1,poschar1,poschar2);								cout << "The current content of List1: ";				PrinttheList(head1);				cout << endl << endl;			}			else if(cmdstr == "insert2")			{				cmdstream >> poschar1 >> poschar2;				cout << "Inserting " << poschar1 << " after " << poschar2 << " in List2." << endl;				InsertInList(head2,poschar1,poschar2);								cout << "The current content of List2: ";				PrinttheList(head2);				cout << endl << endl;			}			else if(cmdstr == "exit")			{				cout << "Clearing the two lists and saying Goodbye!" <<endl;				DeleteList(head1);				DeleteList(head2);				break;			}					}		else		{			cout << "Invalid command." << endl;				}		}while (true);	return 0;}